load"sieve.rb"
load"set2c.rb"
def initial(fn)
  f = open(fn)
  c=Array.new
 while (s=f.gets) !=nil do 
d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23= s.chomp.split(/ /)
   c << [d1.to_i,d2.to_i,d3.to_i,d4.to_i,d5.to_i,d6.to_i,d7.to_i,d8.to_i,d9.to_i,d10.to_i,d11.to_i,d12.to_i,d13.to_i,d14.to_i,d15.to_i,d16.to_i,d17.to_i,d18.to_i,d19.to_i,d20.to_i,d21.to_i,d22.to_i,d23.to_i]
 end
  v=BitVector.new(8124*120)
  for i in 0..c.length-1
    for j in 0..22
      v.set(120*i+c[i][j])
    end
  end 
  atr=Array.new(200)
  item1=Array.new
  item2=Array.new
  for i in 0..atr.length-1
    atr[i]=0
  end
for i in 0..c.length-1
  for j in 0..22
  atr[c[i][j]] +=1
  end
end
  for i in 0..atr.length-1
    if atr[i] >= 2000
      item1 << [i]
    end
  end
  for i in 0..item1.length-2
    for j in i+1..item1.length-1
      count=0
      for k in 0..c.length-1
         if v.bit(k*120+item1[i][0])==true && v.bit(k*120+item1[j][0])==true
          count += 1
         end
     end 
      if count >=2000
        item2 << [i,j]
      end
    end
   end
 return item2
item3f=Array.new
item3 = Array.new
  for i in 0..item2.length-1
    j=i+1
    while j <item2.length-1 && item2[j][0] == item2[i][0] 
      item3f << [item2[i][0],item2[i][1],item2[j][1]].sort
      j += 1
    end
  end
 for i in 0..item3f.length-1
   count3=0
   for k in 0..8123
     if v.bit(k*120+item3f[i][0]) == true && v.bit(k*120+item3f[i][1]) == true &&  v.bit(k*120+item3f[i][2]) == true
       count3 += 1
      end
   end
   if count3 >= 2000
     item3 << item3f[i]
   end
 end

 end

def test2
  f = open("mushroom4.dat")
  c=Array.new
 while (s=f.gets) !=nil do 
d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23= s.chomp.split(/ /)
   c << [d1.to_i,d2.to_i,d3.to_i,d4.to_i,d5.to_i,d6.to_i,d7.to_i,d8.to_i,d9.to_i,d10.to_i,d11.to_i,d12.to_i,d13.to_i,d14.to_i,d15.to_i,d16.to_i,d17.to_i,d18.to_i,d19.to_i,d20.to_i,d21.to_i,d22.to_i,d23.to_i]
 end
  v=BitVector.new(8124*120)
  for i in 0..c.length-1
    for j in 0..22
      v.set(120*i+c[i][j])
    end
  end 
 item3=[[0, 6, 7], [0, 6, 8], [0, 6, 16], [0, 6, 17], [0, 6, 18], [0, 6, 38], [0, 6, 41], [0, 6, 46], [0, 6, 67], [0, 6, 68], [0, 6, 69], [0, 7, 8], [0, 7, 16], [0, 7, 17], [0, 7, 18], [0, 7, 38], [0, 7, 41], [0, 7, 46], [0, 7, 67], [0, 7, 68], [0, 7, 69], [0, 8, 16], [0, 8, 17], [0, 8, 18], [0, 16, 17], [0, 16, 18], [0, 16, 38], [0, 16, 41], [0, 16, 46], [0, 16, 67], [0, 16, 68], [0, 16, 69], [0, 17, 18], [0, 17, 38], [0, 17, 41], [0, 17, 46], [0, 17, 67], [0, 17, 68], [0, 17, 69], [0, 18, 38], [0, 18, 41], [0, 18, 46], [0, 18, 67], [0, 18, 68], [0, 18, 69], [0, 38, 46], [0, 38, 68], [0, 38, 69], [1, 6, 7], [1, 6, 12], [1, 6, 13], [1, 6, 14], [1, 6, 15], [1, 6, 16], [1, 6, 17], [1, 6, 18], [1, 6, 26], [1, 6, 41], [1, 7, 16], [1, 7, 17], [1, 7, 18], [1, 7, 26], [1, 12, 16], [1, 12, 17], [1, 12, 18], [1, 13, 16], [1, 13, 17], [1, 13, 18], [1, 14, 16], [1, 14, 17], [1, 15, 16], [1, 15, 17], [1, 16, 17], [1, 16, 18], [1, 16, 26], [1, 16, 38], [1, 16, 41], [1, 17, 18], [1, 17, 26], [1, 17, 41], [1, 18, 26], [1, 18, 41], [2, 6, 16], [2, 6, 17], [2, 6, 18], [2, 16, 17], [2, 16, 18], [2, 17, 18], [3, 6, 16], [3, 6, 17], [3, 6, 18], [3, 7, 16], [3, 16, 17], [3, 16, 18], [3, 17, 18], [4, 6, 7], [4, 6, 12], [4, 6, 13], [4, 6, 14], [4, 6, 15], [4, 6, 16], [4, 6, 17], [4, 6, 18], [4, 6, 19], [4, 6, 23], [4, 6, 26], [4, 6, 39], [4, 6, 41], [4, 6, 53], [4, 7, 12], [4, 7, 13], [4, 7, 14], [4, 7, 15], [4, 7, 16], [4, 7, 17], [4, 7, 18], [4, 7, 19], [4, 7, 23], [4, 7, 26], [4, 7, 39], [4, 7, 41], [4, 7, 53], [4, 12, 13], [4, 12, 16], [4, 12, 17], [4, 12, 18], [4, 12, 19], [4, 12, 23], [4, 12, 26], [4, 12, 39], [4, 12, 53], [4, 13, 16], [4, 13, 17], [4, 13, 18], [4, 13, 19], [4, 13, 23], [4, 13, 26], [4, 13, 39], [4, 13, 53], [4, 14, 16], [4, 14, 17], [4, 14, 19], [4, 15, 16], [4, 15, 17], [4, 15, 19], [4, 16, 17], [4, 16, 18], [4, 16, 19], [4, 16, 23], [4, 16, 26], [4, 16, 39], [4, 16, 41], [4, 16, 53], [4, 17, 18], [4, 17, 19], [4, 17, 23], [4, 17, 26], [4, 17, 39], [4, 17, 41], [4, 17, 53], [4, 18, 19], [4, 18, 23], [4, 18, 26], [4, 18, 41], [4, 18, 53], [4, 19, 23], [4, 19, 26], [4, 19, 41], [4, 19, 53], [4, 23, 26], [4, 26, 39], [4, 26, 41], [4, 26, 53], [4, 41, 53], [6, 7, 8], [6, 7, 10], [6, 7, 12], [6, 7, 13], [6, 7, 14], [6, 7, 15], [6, 7, 16], [6, 7, 17], [6, 7, 18], [6, 7, 19], [6, 7, 23], [6, 7, 26], [6, 7, 36], [6, 7, 38], [6, 7, 39], [6, 7, 41], [6, 7, 46], [6, 7, 52], [6, 7, 53], [6, 7, 54], [6, 7, 67], [6, 7, 68], [6, 7, 69], [6, 7, 80], [6, 7, 83], [6, 8, 16], [6, 8, 17], [6, 8, 18], [6, 8, 38], [6, 8, 46], [6, 10, 16], [6, 10, 17], [6, 10, 18], [6, 10, 26], [6, 10, 38], [6, 12, 13], [6, 12, 14], [6, 12, 15], [6, 12, 16], [6, 12, 17], [6, 12, 18], [6, 12, 19], [6, 12, 23], [6, 12, 26], [6, 12, 36], [6, 12, 39], [6, 12, 41], [6, 12, 46], [6, 12, 53], [6, 12, 54], [6, 13, 14], [6, 13, 15], [6, 13, 16], [6, 13, 17], [6, 13, 18], [6, 13, 19], [6, 13, 23], [6, 13, 26], [6, 13, 39], [6, 13, 41], [6, 13, 46], [6, 13, 53], [6, 13, 54], [6, 14, 15], [6, 14, 16], [6, 14, 17], [6, 14, 18], [6, 14, 19], [6, 14, 23], [6, 14, 26], [6, 14, 38], [6, 14, 39], [6, 14, 41], [6, 15, 16], [6, 15, 17], [6, 15, 18], [6, 15, 19], [6, 15, 23], [6, 15, 26], [6, 15, 38], [6, 15, 41], [6, 16, 17], [6, 16, 18], [6, 16, 19], [6, 16, 23], [6, 16, 26], [6, 16, 30], [6, 16, 36], [6, 16, 38], [6, 16, 39], [6, 16, 41], [6, 16, 42], [6, 16, 46], [6, 16, 48], [6, 16, 52], [6, 16, 53], [6, 16, 54], [6, 16, 67], [6, 16, 68], [6, 16, 69], [6, 16, 80], [6, 16, 83], [6, 17, 18], [6, 17, 19], [6, 17, 23], [6, 17, 26], [6, 17, 30], [6, 17, 36], [6, 17, 38], [6, 17, 39], [6, 17, 41], [6, 17, 42], [6, 17, 46], [6, 17, 48], [6, 17, 52], [6, 17, 53], [6, 17, 54], [6, 17, 67], [6, 17, 68], [6, 17, 69], [6, 17, 80], [6, 17, 83], [6, 18, 19], [6, 18, 23], [6, 18, 26], [6, 18, 36], [6, 18, 38], [6, 18, 39], [6, 18, 41], [6, 18, 42], [6, 18, 46], [6, 18, 48], [6, 18, 52], [6, 18, 53], [6, 18, 54], [6, 18, 67], [6, 18, 68], [6, 18, 69], [6, 19, 23], [6, 19, 26], [6, 19, 39], [6, 19, 41], [6, 19, 53], [6, 19, 54], [6, 23, 26], [6, 23, 39], [6, 23, 41], [6, 26, 30], [6, 26, 36], [6, 26, 38], [6, 26, 39], [6, 26, 41], [6, 26, 48], [6, 26, 52], [6, 26, 53], [6, 26, 54], [6, 38, 41], [6, 38, 42], [6, 38, 46], [6, 38, 68], [6, 38, 69], [6, 38, 80], [6, 38, 83], [6, 39, 41], [6, 41, 42], [6, 41, 46], [6, 41, 52], [6, 41, 53], [6, 41, 54], [6, 42, 83], [6, 53, 54], [6, 80, 83], [7, 8, 16], [7, 8, 17], [7, 8, 18], [7, 8, 38], [7, 8, 46], [7, 10, 16], [7, 10, 17], [7, 10, 18], [7, 10, 26], [7, 12, 13], [7, 12, 14], [7, 12, 15], [7, 12, 16], [7, 12, 17], [7, 12, 18], [7, 12, 19], [7, 12, 23], [7, 12, 26], [7, 12, 36], [7, 12, 39], [7, 12, 41], [7, 12, 46], [7, 12, 53], [7, 12, 54], [7, 13, 14], [7, 13, 15], [7, 13, 16], [7, 13, 17], [7, 13, 18], [7, 13, 19], [7, 13, 23], [7, 13, 26], [7, 13, 39], [7, 13, 41], [7, 13, 46], [7, 13, 53], [7, 13, 54], [7, 14, 15], [7, 14, 16], [7, 14, 17], [7, 14, 18], [7, 14, 19], [7, 15, 16], [7, 15, 17], [7, 15, 18], [7, 15, 19], [7, 16, 17], [7, 16, 18], [7, 16, 19], [7, 16, 23], [7, 16, 26], [7, 16, 36], [7, 16, 38], [7, 16, 39], [7, 16, 41], [7, 16, 46], [7, 16, 52], [7, 16, 53], [7, 16, 54], [7, 16, 67], [7, 16, 68], [7, 16, 69], [7, 16, 80], [7, 16, 83], [7, 17, 18], [7, 17, 19], [7, 17, 23], [7, 17, 26], [7, 17, 36], [7, 17, 38], [7, 17, 39], [7, 17, 41], [7, 17, 46], [7, 17, 52], [7, 17, 53], [7, 17, 54], [7, 17, 67], [7, 17, 68], [7, 17, 69], [7, 17, 80], [7, 17, 83], [7, 18, 19], [7, 18, 23], [7, 18, 26], [7, 18, 36], [7, 18, 38], [7, 18, 39], [7, 18, 41], [7, 18, 46], [7, 18, 52], [7, 18, 53], [7, 18, 54], [7, 18, 67], [7, 18, 68], [7, 18, 69], [7, 18, 80], [7, 19, 23], [7, 19, 26], [7, 19, 39], [7, 19, 41], [7, 19, 53], [7, 23, 26], [7, 23, 39], [7, 26, 36], [7, 26, 39], [7, 26, 41], [7, 26, 53], [7, 26, 54], [7, 38, 46], [7, 38, 68], [7, 38, 69], [7, 38, 80], [7, 41, 46], [7, 41, 53], [7, 41, 54], [7, 53, 54], [8, 16, 17], [8, 16, 18], [8, 16, 38], [8, 16, 46], [8, 17, 18], [8, 17, 38], [8, 17, 46], [8, 18, 38], [8, 18, 46], [10, 16, 17], [10, 16, 18], [10, 16, 26], [10, 16, 38], [10, 17, 18], [10, 17, 26], [10, 17, 38], [10, 18, 26], [12, 13, 14], [12, 13, 15], [12, 13, 16], [12, 13, 17], [12, 13, 18], [12, 13, 19], [12, 13, 23], [12, 13, 26], [12, 13, 39], [12, 13, 41], [12, 13, 53], [12, 13, 54], [12, 14, 15], [12, 14, 16], [12, 14, 17], [12, 14, 18], [12, 14, 19], [12, 14, 23], [12, 14, 26], [12, 15, 16], [12, 15, 17], [12, 15, 18], [12, 15, 19], [12, 15, 23], [12, 15, 26], [12, 16, 17], [12, 16, 18], [12, 16, 19], [12, 16, 23], [12, 16, 26], [12, 16, 36], [12, 16, 39], [12, 16, 41], [12, 16, 46], [12, 16, 53], [12, 16, 54], [12, 17, 18], [12, 17, 19], [12, 17, 23], [12, 17, 26], [12, 17, 36], [12, 17, 39], [12, 17, 41], [12, 17, 46], [12, 17, 53], [12, 17, 54], [12, 18, 19], [12, 18, 23], [12, 18, 26], [12, 18, 39], [12, 18, 41], [12, 18, 46], [12, 18, 53], [12, 18, 54], [12, 19, 23], [12, 19, 26], [12, 19, 39], [12, 19, 53], [12, 19, 54], [12, 23, 26], [12, 23, 39], [12, 23, 41], [12, 26, 39], [12, 26, 41], [12, 39, 41], [12, 41, 54], [12, 53, 54], [13, 14, 15], [13, 14, 16], [13, 14, 17], [13, 14, 18], [13, 14, 19], [13, 15, 16], [13, 15, 17], [13, 15, 18], [13, 15, 19], [13, 16, 17], [13, 16, 18], [13, 16, 19], [13, 16, 23], [13, 16, 26], [13, 16, 39], [13, 16, 41], [13, 16, 46], [13, 16, 53], [13, 16, 54], [13, 17, 18], [13, 17, 19], [13, 17, 23], [13, 17, 26], [13, 17, 39], [13, 17, 41], [13, 17, 46], [13, 17, 53], [13, 17, 54], [13, 18, 19], [13, 18, 23], [13, 18, 26], [13, 18, 39], [13, 18, 41], [13, 18, 46], [13, 18, 53], [13, 18, 54], [13, 19, 23], [13, 19, 26], [13, 19, 39], [13, 19, 53], [13, 19, 54], [13, 23, 26], [13, 23, 39], [13, 23, 41], [13, 26, 39], [13, 26, 41], [13, 39, 41], [13, 41, 54], [13, 53, 54], [14, 15, 16], [14, 15, 17], [14, 15, 18], [14, 15, 19], [14, 15, 23], [14, 15, 26], [14, 16, 17], [14, 16, 18], [14, 16, 19], [14, 16, 23], [14, 16, 26], [14, 16, 38], [14, 16, 39], [14, 16, 41], [14, 17, 18], [14, 17, 19], [14, 17, 23], [14, 17, 26], [14, 17, 38], [14, 17, 39], [14, 17, 41], [14, 18, 19], [14, 18, 23], [14, 18, 26], [14, 18, 38], [14, 18, 41], [14, 23, 26], [15, 16, 17], [15, 16, 18], [15, 16, 19], [15, 16, 23], [15, 16, 26], [15, 16, 38], [15, 16, 41], [15, 17, 18], [15, 17, 19], [15, 17, 23], [15, 17, 26], [15, 17, 38], [15, 17, 41], [15, 18, 19], [15, 18, 23], [15, 18, 26], [15, 18, 41], [15, 23, 26], [16, 17, 18], [16, 17, 19], [16, 17, 23], [16, 17, 26], [16, 17, 30], [16, 17, 36], [16, 17, 38], [16, 17, 39], [16, 17, 41], [16, 17, 42], [16, 17, 46], [16, 17, 48], [16, 17, 52], [16, 17, 53], [16, 17, 54], [16, 17, 67], [16, 17, 68], [16, 17, 69], [16, 17, 80], [16, 17, 83], [16, 18, 19], [16, 18, 23], [16, 18, 26], [16, 18, 36], [16, 18, 38], [16, 18, 39], [16, 18, 41], [16, 18, 42], [16, 18, 46], [16, 18, 48], [16, 18, 52], [16, 18, 53], [16, 18, 54], [16, 18, 67], [16, 18, 68], [16, 18, 69], [16, 18, 80], [16, 19, 23], [16, 19, 26], [16, 19, 39], [16, 19, 41], [16, 19, 53], [16, 19, 54], [16, 23, 26], [16, 23, 39], [16, 23, 41], [16, 26, 30], [16, 26, 36], [16, 26, 38], [16, 26, 39], [16, 26, 41], [16, 26, 48], [16, 26, 52], [16, 26, 53], [16, 26, 54], [16, 38, 41], [16, 38, 42], [16, 38, 46], [16, 38, 68], [16, 38, 69], [16, 38, 80], [16, 38, 83], [16, 39, 41], [16, 41, 42], [16, 41, 46], [16, 41, 52], [16, 41, 53], [16, 41, 54], [16, 42, 83], [16, 53, 54], [16, 80, 83], [17, 18, 19], [17, 18, 23], [17, 18, 26], [17, 18, 36], [17, 18, 38], [17, 18, 39], [17, 18, 41], [17, 18, 42], [17, 18, 46], [17, 18, 48], [17, 18, 52], [17, 18, 53], [17, 18, 54], [17, 18, 67], [17, 18, 68], [17, 18, 69], [17, 19, 23], [17, 19, 26], [17, 19, 39], [17, 19, 41], [17, 19, 53], [17, 19, 54], [17, 23, 26], [17, 23, 39], [17, 23, 41], [17, 26, 30], [17, 26, 36], [17, 26, 38], [17, 26, 39], [17, 26, 41], [17, 26, 48], [17, 26, 52], [17, 26, 53], [17, 26, 54], [17, 38, 41], [17, 38, 42], [17, 38, 46], [17, 38, 68], [17, 38, 69], [17, 38, 80], [17, 38, 83], [17, 39, 41], [17, 41, 42], [17, 41, 46], [17, 41, 52], [17, 41, 53], [17, 41, 54], [17, 42, 83], [17, 53, 54], [17, 80, 83], [18, 19, 23], [18, 19, 26], [18, 19, 39], [18, 19, 41], [18, 19, 53], [18, 19, 54], [18, 23, 26], [18, 23, 39], [18, 23, 41], [18, 26, 38], [18, 26, 39], [18, 26, 41], [18, 26, 52], [18, 26, 53], [18, 26, 54], [18, 38, 41], [18, 38, 42], [18, 38, 46], [18, 38, 68], [18, 38, 69], [18, 38, 80], [18, 39, 41], [18, 41, 42], [18, 41, 46], [18, 41, 52], [18, 41, 53], [18, 41, 54], [18, 53, 54], [19, 23, 26], [19, 23, 39], [19, 26, 39], [19, 26, 41], [19, 26, 53], [19, 41, 53], [19, 53, 54], [23, 26, 39], [23, 26, 41], [23, 39, 41], [26, 39, 41], [26, 41, 53], [26, 53, 54], [38, 41, 42], [38, 80, 83]]
 item4f=Array.new
 item4=Array.new
  for i in 0..item3.length-2
    for j in i+1..item3.length-1
      if (item3[i]-item3[j]).size == 1
        item4f << (item3[j]+(item3[i]-item3[j])).sort
       end
    end
  end
  item4f =item4f.uniq
 for i in 0..item4f.length-1
   count4=0
   for k in 0..c.length-1
     if v.bit(k*120+item4f[i][0]) == true && v.bit(k*120+item4f[i][1]) == true &&  v.bit(k*120+item4f[i][2]) == true &&  v.bit(k*120+item4f[i][3]) == true
       count4 += 1
     end
   end
   if count4 >= 2000
     item4 << item4f[i]
   end
 end
  p  item4
end
    
def itemf(k)
if k >=2
  f=Array.new
  for i in 0..item(k-1).length-2
    for j in i+1..item(k-1).length-1
      if (item(k-1)[i]-item(k-1)[j]).size == 1
       f << union(item(k-1)[i],item(k-1)[j])
      end
    end
   end
  f
 end
end

def item(k)
  s = open("mushroom4.dat")
  c=Array.new
 while (j=s.gets) !=nil do 
d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23= j.chomp.split(/ /)
   c << [d1.to_i,d2.to_i,d3.to_i,d4.to_i,d5.to_i,d6.to_i,d7.to_i,d8.to_i,d9.to_i,d10.to_i,d11.to_i,d12.to_i,d13.to_i,d14.to_i,d15.to_i,d16.to_i,d17.to_i,d18.to_i,d19.to_i,d20.to_i,d21.to_i,d22.to_i,d23.to_i]
 end
  v=BitVector.new(8124*120)
  for i in 0..c.length-1
    for j in 0..22
      v.set(120*i+c[i][j])
    end
  end   

 f=Array.new
  if k==1
    f=[0, 1, 2, 3, 4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 26, 30, 36, 38, 39, 41, 42, 46, 48, 52, 53, 54, 67, 68, 69, 80, 83]
    if k >=2
      for i in 0..itemf(k).length-1
        count=0
        for j in 0..c.length-1
          for l in 0..itemf(k)[i].length-1
            if v.bit(k*120+itemf(k)[i][l]) == true
              count +=1
            end
          end
        end
        if count >= 2000
          f << itemf(k)[i]
        end
      end
      f
     end
   end
   f
end
          
        
    


      
      
  

        
   

 
          
